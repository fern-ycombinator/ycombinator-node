/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import { YcombinatorApi } from "@fern-api/ycombinator";
import urlJoin from "url-join";
import * as core from "../../../../core";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.YcombinatorApiEnvironment | string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Get a list of the public Y Combinator companies in the [Directory](https://www.ycombinator.com/companies).
     * @throws {YcombinatorApi.RateLimitError}
     */
    public async getAllCompanies(
        request: YcombinatorApi.GetAllCompaniesRequest = {}
    ): Promise<YcombinatorApi.AllCompanies> {
        const {
            page,
            q,
            batch,
            status,
            industry,
            region,
            tags,
            isHiring,
            nonprofit,
            highlightBlack,
            highlightLatinx,
            highlightWomen,
        } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (q != null) {
            _queryParams.append("q", q);
        }

        if (batch != null) {
            _queryParams.append("batch", batch);
        }

        if (status != null) {
            _queryParams.append("status", status);
        }

        if (industry != null) {
            _queryParams.append("industry", industry);
        }

        if (region != null) {
            _queryParams.append("region", region);
        }

        if (tags != null) {
            _queryParams.append("tags", tags);
        }

        if (isHiring != null) {
            _queryParams.append("isHiring", isHiring.toString());
        }

        if (nonprofit != null) {
            _queryParams.append("nonprofit", nonprofit.toString());
        }

        if (highlightBlack != null) {
            _queryParams.append("highlight_black", highlightBlack.toString());
        }

        if (highlightLatinx != null) {
            _queryParams.append("highlight_latinx", highlightLatinx.toString());
        }

        if (highlightWomen != null) {
            _queryParams.append("highlight_women", highlightWomen.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.YcombinatorApiEnvironment.Production, "/companies"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.AllCompanies.parse(_response.body as serializers.AllCompanies.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new YcombinatorApi.RateLimitError();
                default:
                    throw new errors.YcombinatorApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.YcombinatorApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.YcombinatorApiTimeoutError();
            case "unknown":
                throw new errors.YcombinatorApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
