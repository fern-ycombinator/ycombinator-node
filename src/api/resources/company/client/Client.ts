/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import { YcombinatorApi } from "@fern-api/ycombinator";
import urlJoin from "url-join";
import * as core from "../../../../core";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.YcombinatorApiEnvironment | string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Get a list of the public Y Combinator companies in the [Directory](https://www.ycombinator.com/companies).
     * @throws {YcombinatorApi.RateLimitError}
     */
    public async getAllCompanies(): Promise<YcombinatorApi.AllCompanies> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.YcombinatorApiEnvironment.Production, "/companies"),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.AllCompanies.parse(_response.body as serializers.AllCompanies.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new YcombinatorApi.RateLimitError();
                default:
                    throw new errors.YcombinatorApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.YcombinatorApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.YcombinatorApiTimeoutError();
            case "unknown":
                throw new errors.YcombinatorApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
